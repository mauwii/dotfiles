# shellcheck shell=sh

# small function to print log messages if $DEBUG is true
# for info how to format check out the manpage of printf
debuglog() {
    if [ "${DEBUG}" = true ]; then
        # shellcheck disable=SC2059
        printf -v _logmsg "$@"
        printf "[%s] %s" "$(date "+%T")" "${_logmsg}"
    fi
}

# debuglog "loading .functions\n"

# prepend dir to fpath if dir exists
prepend_fpath() {
    if [ $# -ne 1 ]; then
        printf "Usage: %s <path>" "$0"
        return 1
    elif [ ! -d "$1" ]; then
        printf "%s Error:\n\t%s is not a directory" "$0" "$1"
        return 1
    elif [ -d "${1}" ] && echo "${SHELL}" | grep -q "zsh"; then
        _escaped=${1//\//\\\/}
        # _escaped=$(echo "${1}" | sed 's#\/#\\/#g')
        _cleaned=${FPATH//:${_escaped}:/:}
        # _cleaned=$(echo "$FPATH" | sed "s#:${_escaped}:#:#g")
        export FPATH="${1}${_cleaned:+:$_cleaned}" \
            && debuglog "updated FPATH: %s\n" "$FPATH"
        unset _escaped _cleaned
    fi
}

# prepend dir to path if dir exists
prepend_path() {
    if [ $# -ne 1 ]; then
        echo "Usage: $0 <path>"
        return 1
    elif [ ! -d "$1" ]; then
        printf "%s Error:\n\t%s is not a directory" "$0" "$1"
        return 1
    else
        _escaped=${1//\//\\\/}
        # _escaped=$(echo "${1}" | sed 's#\/#\\/#g')
        _cleaned=${PATH//:${_escaped}:/:}
        # _cleaned=$(echo "$PATH" | sed "s#:${_escaped}:#:#g")
        export PATH="${1}${_cleaned:+:$_cleaned}" \
            && debuglog "updated PATH: %s\n" "$PATH"
        unset _escaped _cleaned
    fi
}

# initialize brew
brew_init() {
    # fail if no or to many arguments are provided
    if [ $# -ne 1 ]; then
        printf "Usage: %s <brew_prefix>\n" "$0"
        return 1
    # check if brew is available and initialize
    elif [ -x "${1}/bin/brew" ]; then
        # add brew to shell environment
        eval "$("${1}/bin/brew" shellenv)" \
            && debuglog "brew initialized\n"
        # set brew bundle file
        export HOMEBREW_BUNDLE_FILE=~/.Brewfile
        # enable autoremove
        export HOMEBREW_AUTOREMOVE=1
        # enable bat
        if command -v bat >/dev/null 2>&1; then
            export HOMEBREW_BAT=1
        fi
        # add fpaths if dirs exist
        if [ -d "${1}/share/zsh/site-functions" ]; then
            prepend_fpath "${1}/share/zsh/site-functions"
        fi
        if [ -d "${1}/share/zsh-completions" ]; then
            prepend_fpath "${1}/share/zsh-completions"
        fi
    fi
}

# view markdown files
viewmd() {
    if [ $# -ne 1 ]; then
        printf "Usage: %s <path to md file>" "$0"
        return 1
    elif ! command -v pandoc >/dev/null 2>&1; then
        printf "Error: pandoc not found"
    elif ! command -v w3m >/dev/null 2>&1; then
        printf "Error: w3m not found"
    else
        pandoc -f markdown -t html "$1" | w3m -T text/html
    fi
}

# view git flavored markdown files
viewgitmd() {
    if [ $# -ne 1 ]; then
        printf "Usage: %s <path to md file>" "$0"
        return 1
    elif ! command -v pandoc >/dev/null 2>&1; then
        printf "Error: pandoc not found"
    elif ! command -v w3m >/dev/null 2>&1; then
        printf "Error: w3m not found"
    else
        pandoc -f gfm -t html "$1" | w3m -T text/html -o display_image=true
    fi
}
