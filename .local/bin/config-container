#!/usr/bin/env bash
# shellcheck shell=bash disable=SC2207

# check that docker is installed and running
if command -v docker >/dev/null 2>&1; then
    if ! docker info >/dev/null 2>&1; then
        printf "error: docker is not running\n"
        exit 1
    fi
else
    printf "error: docker exectuable is not in your PATH\n"
    exit 1
fi

## initialize variables and set defaults

# enable output of debug messages
debug=${DEBUG:-false}
# path to the dotfiles (bare)repo
dotfilesdir="$HOME"
# commands to mount dotfiles
dockermounts=()
# home directory in the container
dockerhome="/root"
# dockerhome="/home/$dockeruser_name"
# timezone to use in the container
dockertime="${TZ:-UTC}"
# workdir in the container
workdir="${dockerhome}"
# directory to mount the dotfiles in the container
dockermountdir="/mnt/dotfiles"
# default shell in the container
shell="/bin/zsh"
# target architecture
arch="$(uname -m)"
# target platform
platform="linux/${arch}"
# container image to use
image="mauwii/dotfiles"
# packages to install
pkgs=()
# command to install packages
installcmd=()
# execute service ssh start
ssh_start="false"
# execute sshd -D -e
ssh_only="false"

# small function to print log messages if $DEBUG is true
# find infos about how to format in the manpage of printf
debuglog() {
    if [ "${debug}" = "true" ]; then
        # shellcheck disable=SC2059
        _logmsg=$(printf "$@")
        printf "[%s] %s\n" "$(date "+%T")" "${_logmsg}"
    fi
}

helpmsg() {
    # format help message lines:
    #   $1: long option
    #   $2: short option
    #   $3: description
    #   $4: current value (optional)
    printhelp() {
        printf "  %-13s %3s  %-35s %21s\n" "${1}" "${2}" "${3}" "${4:-}"
    }
    printf "\nUsage:\t%s [options]\n" "${0##*/}"
    printf "\nOptions:\n\n"
    printhelp "--dotfilesdir" "-p" "Path to your dotfiles" "${dotfilesdir}"
    printhelp "--image" "-i" "Container image to use" "${_image:-$image}"
    printhelp "--shell" "-s" "Shell to use in the container" "${_shell:-$shell}"
    printhelp "--arch" "" "Container target arch" "${_arch:-$arch}"
    printhelp "--platform" "" "Container target platform" "${_platform:-$platform}"
    printhelp "--no-pkgs" "-0" "Switch to install without pkgs"
    printhelp "--debug" "-d" "Switch to enable debug messages"
    printhelp "--build" "" "Build the container image"
    printhelp "--build-only" "" "Build but don't run the container"
    printhelp "--ssh" "" "Add 'service ssh start' to the container cmd"
    printhelp "--ssh-only" "" "Execute 'sshd -D -e' in the container"
    printhelp "--help" "-h" "Print this help message"
}

# read arguments which where passed to the script
for arg in "$@"; do
    case "$arg" in
        -h | --help)
            printhelp="true"
            ;;
        -p | --dotfilesdir*)
            [ "${_dotfilesdir:-unset}" != "unset" ] \
                && echo "error: dotfiles can only be set once" \
                && exit 1
            if [[ "${arg}" != *"="* ]]; then
                shift
                _dotfilesdir="$1"
                return
            else
                _dotfilesdir="${arg#*=}"
            fi
            if [ -d "$_dotfilesdir" ]; then
                ## _dotfilesdir="$(realpath -e $_dotfilesdir)"
                dotfilesdir="$_dotfilesdir"
            else
                printf "error: %s is not a directory" "${_dotfilesdir}"
                exit 1
            fi
            ;;
        -s | --shell*)
            [ "${_shell:-unset}" != "unset" ] \
                && echo "error: shell can only be set once" \
                && exit 1
            if [[ "${arg}" != *"="* ]]; then
                shift
                _shell="$1"
                skip="true"
            else
                _shell="${arg#*=}"
            fi
            # shell="$_shell"
            continue
            ;;
        -i | --image*)
            [ "${_image:-unset}" != "unset" ] \
                && echo "error: image can only be set once" \
                && exit 1
            if [[ "${arg}" != *"="* ]]; then
                shift
                _image="$1"
                skip="true"
            else
                _image="${arg#*=}"
            fi
            [ -z "$_image" ] \
                && echo "error: image can not be empty" \
                && exit 1
            [ "${_image:0:1}" = "-" ] \
                && echo "error: image can not start with a dash" \
                && exit 1
            [ "${_image:0:1}" = "/" ] \
                && echo "error: image can not start with a slash" \
                && exit 1
            [ "${_image:0:1}" = ":" ] \
                && echo "error: image can not start with a colon" \
                && exit 1
            [[ "${_image}" = *":"* ]] \
                && echo "error: image can not contain a colon" \
                && exit 1
            [ "${_image: -1}" = ":" ] \
                && echo "error: image can not end with a colon" \
                && exit 1
            [ "${_image: -1}" = "/" ] \
                && echo "error: image can not end with a slash" \
                && exit 1
            [ "${_image: -1}" = "-" ] \
                && echo "error: image can not end with a dash" \
                && exit 1
            [ "${_image: -1}" = "." ] \
                && echo "error: image can not end with a dot" \
                && exit 1
            [ "${_image: -1}" = "_" ] \
                && echo "error: image can not end with an underscore" \
                && exit 1
            [ "${_image: -1}" = "@" ] \
                && echo "error: image can not end with an at sign" \
                && exit 1
            [ "${_image: -1}" = "!" ] \
                && echo "error: image can not end with an exclamation mark" \
                && exit 1
            [ "${_image: -1}" = "#" ] \
                && echo "error: image can not end with a hash" \
                && exit 1
            [ "${_image: -1}" = "$" ] \
                && echo "error: image can not end with a dollar sign" \
                && exit 1
            [ "${_image: -1}" = "%" ] \
                && echo "error: image can not end with a percent sign" \
                && exit 1
            [ "${_image: -1}" = "^" ] \
                && echo "error: image can not end with a caret" \
                && exit 1
            continue
            ;;
        -d | --debug)
            # enable debug messages
            debug="true"
            ;;
        -0 | --no-pkgs)
            # don't install packages
            no_pkgs="true"
            ;;
        --build)
            # build the image
            build="true"
            ;;
        --build-only)
            # build the image
            build_only="true"
            ;;
        --arch*)
            [ "${_arch:-unset}" != "unset" ] \
                && echo "error: arch can only be set once" \
                && exit 1
            # target arch for the image
            if [[ "${arg}" != *"="* ]]; then
                shift
                _arch="$1"
                skip="true"
            else
                _arch="${arg#*=}"
            fi
            ;;
        --platform*)
            [ "${_platform:-unset}" != "unset" ] \
                && echo "error: platform can only be set once" \
                && exit 1
            # target platform(s) for the image
            if [[ "${arg}" != *"="* ]]; then
                shift
                _platform="$1"
                skip="true"
            else
                _platform="${arg#*=}"
            fi
            ;;
        --skip-brew)
            # skip "brew bundle install"
            skip_brew="true"
            ;;
        --ssh)
            # add "service ssh start" to the container cmd
            ssh_start="true"
            ;;
        --ssh-only)
            # execute "sshd -D -e" in the container
            ssh_only="true"
            ;;
        *)
            if [ "$skip" = "true" ]; then
                unset skip
            else
                printf "error: unknown argument: %s\n" "$arg"
                helpmsg
                exit 1
            fi
            ;;
    esac
    shift
done

# container image and tag
fulltag="${_image:-$image}:${_arch:-$arch}"
# target platform
platform="${_platform:-linux/${_arch:-$arch}}"

if [[ "${printhelp}" = "true" ]]; then
    printf "\nLittle helper to test and debug the dotfiles in different Distros\n"
    helpmsg
    exit 0
fi

if ! docker image ls --format "{{.Repository}}:{{.Tag}}" | grep -q "${fulltag}"; then
    debuglog "info: image %s not found locally" "${fulltag}"
    if [[ "${_image:-$image}" = "${image}" ]]; then
        build="true"
    fi
fi

if [ "${build}" = "true" ] || [ "${build_only}" = "true" ]; then
    debuglog "info: building dotfiles image"
    debuglog "%20s %s" "Dockerfile:" "${dotfilesdir}/.dotfiles/Dockerfile"
    debuglog "%20s %s" "image:" "${fulltag}"
    debuglog "%20s %s" "platform:" "${platform}"
    docker buildx build \
        --build-arg TZ="${dockertime}" \
        --platform="${platform}" \
        --tag="${fulltag}" \
        --progress=plain \
        --file="${dotfilesdir}/.dotfiles/Dockerfile" .
    if [ $? -ne 0 ]; then
        debuglog "error: failed to build image\n"
        exit 1
    elif [ "${build_only}" = "true" ]; then
        exit 0
    fi
fi

# set shell and installcmd based on image
case "${_image}" in
    */alpine:* | */alpine | alpine:* | alpine)
        installcmd=(apk --no-cache add)
        pkgs=(bat bash direnv exa nano pandoc starship w3m w3m-image zsh)
        initshell="${initshell:-/bin/sh}"
        ;;
    */debian:* | */debian | debian:* | debian | */ubuntu:* | */ubuntu | ubuntu:* | ubuntu)
        installcmd=(apt-get update \&\& apt-get install -y --no-install-recommends)
        pkgs=(bat direnv exa nano pandoc w3m w3m-img)
        ;;
esac

# unset installcmd and pkgs if no_pkgs is set
if [ "${no_pkgs}" == "true" ]; then
    unset pkgs
    debuglog "no packages will be installed"
fi

# set container cmd
precmd=("${pkgs:+${installcmd[@]} ${pkgs[@]} &&}")
ssh_start_cmd=(service ssh start)
container_cmd=(
    "${precmd[@]}" "${dockermountdir}/.dotfiles/setup_local.sh" \&\& exec "${_shell:-$shell}" -l
)
if [[ "${ssh_start}" == "true" ]]; then
    container_cmd=("${ssh_start_cmd[@]}" \&\& "${container_cmd[@]}")
fi
if [[ "${ssh_only}" == "true" ]]; then
    container_cmd=(mkdir -p /run/sshd \&\& sshd -D -e)
fi

# debug output
debuglog "dotfilesdir set to: %s" "${dotfilesdir}"
debuglog "shell set to: %s" "${_shell:-$shell}"
debuglog "image is set to: %s" "${_image:-$image}"
debuglog "container cmd set to: %s" "${container_cmd[*]}"
debuglog "dockermountdir is set to: %s" "${dockermountdir}"

# function to list all files from the bare repo
getdotfiles() {
    command git \
        --git-dir="${HOME}"/.cfg \
        --work-tree="${HOME}" \
        ls-tree \
        --full-tree -r \
        --name-only HEAD
}

# create dockermount parameter for each dotfile
for dotfile in $(getdotfiles); do
    __localfile="${dotfilesdir}/$dotfile"
    __dockerfile="${dockermountdir}/$dotfile"
    if [[ -f "${__localfile}" ]]; then
        dockermounts+=(-v "${__localfile}":"${__dockerfile}")
    fi
done

# mount public key as authorized_keys
if [[ -f "${HOME}/.ssh/id_rsa.pub" ]]; then
    dockermounts+=(-v "${HOME}/.ssh/id_rsa.pub":"${dockerhome}/.ssh/authorized_keys")
fi

# execute container interactive in pseudo tty
debuglog "executing container"
docker run \
    --platform "linux/${_arch:-$arch}" \
    --rm \
    --interactive \
    --tty \
    --workdir="${workdir}" \
    --name dotfiles \
    --hostname dotfiles.local \
    -e "TZ=${TZ:-UTC}" \
    -e "SHELL=${_shell:-${shell}}" \
    -e "DEBUG=${debug}" \
    -p 2222:22 \
    ${LC_TERMINAL:+-e "LC_TERMINAL=${LC_TERMINAL}"} \
    "${dockermounts[@]}" \
    ${skip_brew:+-e "SKIP_BREW_BUNDLE=${skip_brew}"} \
    "${fulltag}" \
    "${initshell:-${_shell:-${shell}}}" -c "${container_cmd[*]}"
