#!/usr/bin/env bash

# I wanted to learn how to use case/shift, so I wrote this script which
# makes debugging the dotfiles in different Distros a bit more comfy.

# small function to print log messages if $DEBUG is true
# find infos about how to format in the manpage of printf
debuglog() {
    if [ "${DEBUG}" = true ]; then
        printf -v _logmsg "$@"
        printf "%s: %s" "$(date "+%T")" "${_logmsg}"
    fi
}

# initialize variables

# enable output of debug messages
DEBUG=${DEBUG:-false}
# path to the dotfiles (bare)repo
dotfilesdir="$HOME"
# home directory in the container
dockerhome="/root"
# workdir in the container
workdir="$dockerhome"
# directory to mount the dotfiles in the container
dockermountdir="${dockerhome}/dotfiles"
# container image to use
image="alpine:3.18"
# default shell in the container
shell=""
# dotfiles to mount
dotfiles=()
# packages to install
pkgs=()
# command to install packages
installcmd=()
# commands to mount dotfiles
dockermounts=()

# read arguments which where passed to the script
for arg in "$@"; do
    case "${arg[@]}" in
        -h | --help)
            printf "\nUsage:\t%s [Options]\n" "${0##*/}"
            printf "\nLittle helper to test and debug the dotfiles in different Distros\n"
            printf "\nOptions:\n\n"
            printf "  -p, --dotfilesdir <path>\tPath to your dotfiles\t\t%s\n" "${dotfilesdir}"
            printf "  -i, --image <image:tag>\tContainer image to use\t\t%s\n" "${image}"
            printf "  -0, --no-pkgs\t\t\tswitch to install without pkgs\n"
            printf "  -d, --debug\t\t\tswitch to enable debug messages\n"
            exit 0
            ;;
        -p | --dotfilesdir*)
            [ "${_dotfilesdir:-unset}" != "unset" ] \
                && echo "error: dotfiles can only be set once" \
                && exit 1
            if [[ "${arg}" != *"="* ]]; then
                shift
                _dotfilesdir="$1"
                return
            else
                _dotfilesdir="${arg#*=}"
            fi
            if [ -d "$_dotfilesdir" ]; then
                ## _dotfilesdir="$(realpath -e $_dotfilesdir)"
                dotfilesdir="$_dotfilesdir"
            else
                printf "error: %s is not a directory" "${_dotfilesdir}"
                exit 1
            fi
            ;;
        -i | --image*)
            [ "${_image:-unset}" != "unset" ] \
                && echo "error: image can only be set once" \
                && exit 1
            if [[ "${arg}" != *"="* ]]; then
                shift
                [ -z "$1" ] \
                    && echo "error: image can not be empty" \
                    && exit 1
                [ "${1:0:1}" = "-" ] \
                    && echo "error: image can not start with a dash" \
                    && exit 1
                [ "${1:0:1}" = "/" ] \
                    && echo "error: image can not start with a slash" \
                    && exit 1
                [ "${1:0:1}" = ":" ] \
                    && echo "error: image can not start with a colon" \
                    && exit 1
                [ "${1: -1}" = ":" ] \
                    && echo "error: image can not end with a colon" \
                    && exit 1
                [ "${1: -1}" = "/" ] \
                    && echo "error: image can not end with a slash" \
                    && exit 1
                [ "${1: -1}" = "-" ] \
                    && echo "error: image can not end with a dash" \
                    && exit 1
                [ "${1: -1}" = "." ] \
                    && echo "error: image can not end with a dot" \
                    && exit 1
                [ "${1: -1}" = "_" ] \
                    && echo "error: image can not end with an underscore" \
                    && exit 1
                [ "${1: -1}" = "@" ] \
                    && echo "error: image can not end with an at sign" \
                    && exit 1
                [ "${1: -1}" = "!" ] \
                    && echo "error: image can not end with an exclamation mark" \
                    && exit 1
                [ "${1: -1}" = "#" ] \
                    && echo "error: image can not end with a hash" \
                    && exit 1
                [ "${1: -1}" = "$" ] \
                    && echo "error: image can not end with a dollar sign" \
                    && exit 1
                [ "${1: -1}" = "%" ] \
                    && echo "error: image can not end with a percent sign" \
                    && exit 1
                [ "${1: -1}" = "^" ] \
                    && echo "error: image can not end with a caret" \
                    && exit 1
                _image="$1"
            else
                _image="${arg#*=}"
            fi
            export image="$_image"
            ;;
        -d | --debug)
            export DEBUG=true
            ;;
        -0 | --no-pkgs)
            export no_pkgs=true
            ;;
        *)
            shift
            [[ "$arg" = "$1" ]] \
                && printf "error: unknown argument: %s\n" "$arg" \
                && exit 1
            ;;
    esac
    shift
done

# set shell and installcmd based on image
case "${image}" in
    */alpine:* | */alpine | alpine:* | alpine)
        shell="bash"
        installcmd=(apk update \&\& apk add --no-cache)
        pkgs=(bat bash direnv exa nano pandoc starship w3m w3m-image)
        ;;
    */ubuntu:* | */ubuntu | ubuntu:* | ubuntu)
        shell="bash"
        installcmd=(apt-get update \&\& apt-get install -y --no-install-recommends)
        pkgs=(bat direnv exa nano pandoc w3m w3m-img)
        ;;
    */debian:* | */debian | debian:* | debian)
        shell="bash"
        installcmd=(apt-get update \&\& apt-get install -y --no-install-recommends)
        pkgs=(bat direnv exa nano pandoc w3m w3m-img)
        ;;
    *)
        printf "couldn't detect distro, will try to install %s without packages\n" "${image}"
        no_img=true
        ;;
esac

# function to list all files from the bare repo
getdotfiles() {
    /usr/bin/git \
        --git-dir="${HOME}"/.cfg \
        --work-tree="${HOME}" \
        ls-tree \
        --full-tree -r \
        --name-only HEAD
}
dotfiles+=($(getdotfiles))

debuglog "dotfilesdir set to: %s\n" "${dotfilesdir}"
[[ "${no_img}" != true ]] && debuglog "image is set to: %s\n" "${image}"

# unset installcmd and pkgs if no_pkgs is set
if [ "$no_pkgs" == true ]; then
    pkgs=()
    installcmd=()
    debuglog "no packages will be installed\n"
fi

# set container cmd
container_cmd=(
    "${installcmd[@]}" "${pkgs[@]}" ${pkgs:+&&} "${shell}" dotfiles/.dotfiles/setup_local.sh \&\& "${shell}" -l
)
debuglog "container cmd set to: %s\n" "${container_cmd[*]}"

# set dotfiles mountpoint to default if not set
export dockermountdir=${dockermountdir:-${dockerhome}/dotfiles}
debuglog "dockermountdir is set to: %s\n" "${dockermountdir}"

for dotfile in "${dotfiles[@]}"; do
    _localfile="${dotfilesdir}/$dotfile"
    _dockerfile="${dockermountdir}/$dotfile"
    if [[ -f "${_localfile}" ]]; then
        dockermounts+=(-v "${_localfile}":"${_dockerfile}")
    fi
done

# execute container interactive in pseudo tty
debuglog "executing container\n"
docker run \
    --rm \
    --interactive \
    --tty \
    --workdir="${workdir}" \
    "${dockermounts[@]}" \
    -e DEBIAN_FRONTEND=noninteractive \
    -e "DEBUG=$DEBUG" \
    --name dotfiles \
    "${image:-debian:bookworm}" \
    sh -c "${container_cmd[*]}"
