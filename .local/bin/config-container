#!/bin/bash

# I wanted to learn how to use case/shift, so I wrote this script which
# makes debugging the dotfiles in different Distros a bit more comfy.

# initialize variables
DEBUG=false
workdir=/root
shell=""
installcmd=()
pkgs=()

# read arguments
for arg in "$@"; do
    case "${arg[@]}" in
        -h | --help)
            printf "\nUsage:\t%s [Options]\n" "${0##*/}"
            printf "\nLittle helper to test and debug the dotfiles in different Distros\n"
            printf "\nOptions:\n\n"
            printf "  -p, --dotfiles <path>\t\tPath to your dotfiles repo\t~/git/mauwii/dotfiles\n"
            printf "  -i, --image <image:tag>\tContainer image to use\t\tdebian:bookworm\n"
            printf "  -0, --no-pkgs\t\t\tswitch to install without pkgs\n"
            printf "  -d, --debug\t\t\tswitch to enable debug messages\n"
            exit 0
            ;;
        -p | --dotfiles*)
            [ "${dotfiles:-unset}" != "unset" ] \
                && echo "error: dotfiles can only be set once" \
                && exit 1
            if [[ "${arg}" != *"="* ]]; then
                shift
                dotfiles="$1"
                return
            else
                dotfiles="${arg#*=}"
            fi
            export dotfiles
            ;;
        -i | --image*)
            [ "${image:-unset}" != "unset" ] \
                && echo "error: image can only be set once" \
                && exit 1
            if [[ "${arg}" != *"="* ]]; then
                shift
                [ -z "$1" ] \
                    && echo "error: image can not be empty" \
                    && exit 1
                [ "${1:0:1}" = "-" ] \
                    && echo "error: image can not start with a dash" \
                    && exit 1
                [ "${1:0:1}" = "/" ] \
                    && echo "error: image can not start with a slash" \
                    && exit 1
                [ "${1:0:1}" = ":" ] \
                    && echo "error: image can not start with a colon" \
                    && exit 1
                [ "${1: -1}" = ":" ] \
                    && echo "error: image can not end with a colon" \
                    && exit 1
                [ "${1: -1}" = "/" ] \
                    && echo "error: image can not end with a slash" \
                    && exit 1
                [ "${1: -1}" = "-" ] \
                    && echo "error: image can not end with a dash" \
                    && exit 1
                [ "${1: -1}" = "." ] \
                    && echo "error: image can not end with a dot" \
                    && exit 1
                [ "${1: -1}" = "_" ] \
                    && echo "error: image can not end with an underscore" \
                    && exit 1
                [ "${1: -1}" = "@" ] \
                    && echo "error: image can not end with an at sign" \
                    && exit 1
                [ "${1: -1}" = "!" ] \
                    && echo "error: image can not end with an exclamation mark" \
                    && exit 1
                [ "${1: -1}" = "#" ] \
                    && echo "error: image can not end with a hash" \
                    && exit 1
                [ "${1: -1}" = "$" ] \
                    && echo "error: image can not end with a dollar sign" \
                    && exit 1
                [ "${1: -1}" = "%" ] \
                    && echo "error: image can not end with a percent sign" \
                    && exit 1
                [ "${1: -1}" = "^" ] \
                    && echo "error: image can not end with a caret" \
                    && exit 1
                image="$1"
            else
                image="${arg#*=}"
            fi
            export image
            ;;
        -d | --debug)
            export DEBUG=true
            ;;
        -0 | --no-pkgs)
            export no_pkgs=true
            ;;
        *)
            shift
            [[ "$arg" = "$1" ]] \
                && printf "error: unknown argument: %s\n" "$arg" \
                && exit 1
            ;;
    esac
    shift
done

# set dotfiles to default if not set
export dotfiles=${dotfiles:-$HOME/git/mauwii/dotfiles}
[[ "${DEBUG}" == true ]] && echo "dotfiles set to: ${dotfiles}"

# set image to default if not set
export image="${image:-debian:bookworm}"

# set shell and installcmd based on image
case "${image}" in
    */alpine:* | */alpine | alpine:* | alpine)
        shell="/bin/ash"
        installcmd=("apk" "add" "--no-cache")
        pkgs=("bat" "direnv" "exa" "nano" "pandoc" "starship" "w3m" "w3m-image")
        ;;
    */ubuntu:* | */ubuntu | ubuntu:* | ubuntu)
        shell="/bin/bash"
        installcmd=(apt-get update \&\& apt-get install -y --no-install-recommends)
        pkgs=(bat direnv exa nano pandoc w3m w3m-img)
        ;;
    */debian:* | */debian | debian:* | debian)
        shell="/bin/bash"
        installcmd=(apt-get update \&\& apt-get install -y --no-install-recommends)
        pkgs=(bat direnv exa nano pandoc w3m w3m-img)
        ;;
    *)
        printf "couldn't detect distro, will try to install %s without packages\n" "${image}"
        no_img=true
        ;;
esac

[[ "${no_img}" != true && "${DEBUG}" == true ]] \
    && printf "image is set to: %s\n" "${image}"

# unset installcmd and pkgs if no_pkgs is set
if [ "$no_pkgs" == true ]; then
    pkgs=()
    installcmd=()
    [ "$DEBUG" = true ] && printf "no packages will be installed\n"
fi

# set container cmd
container_cmd=(
    "${installcmd[@]}" "${pkgs[@]}" ${pkgs:+&&} "${shell}" "dotfiles/.dotfiles/setup_local.sh" ${shell:+&&} "${shell}" "-l"
)
[ "${DEBUG}" == true ] && printf "container cmd set to:\n%s\n" "${container_cmd[*]}"

# # print debug message if DEBUG is set
# [[ "${DEBUG}" == true && "$no_pkgs" != true && "$no_img" != true ]] \
#     && printf "will use %s with these options:\n\t%s %s %s\n" "${image}" "${shell}" "${installcmd[*]}" "${pkgs[*]}"

# execute container interactive in pseudo tty
[ "${DEBUG}" == true ] && printf "executing container\n"
docker run \
    --rm \
    --interactive \
    --tty \
    --workdir="${workdir}" \
    -v "${dotfiles}:/root/dotfiles" \
    -e DEBIAN_FRONTEND=noninteractive \
    -e "DEBUG=$DEBUG" \
    "${image:-debian:bookworm}" \
    /bin/sh -c "${container_cmd[*]}"
# sh -c "${installcmd:+$installcmd $pkgs &&} $shell dotfiles/.dotfiles/setup_local.sh && $shell -l"
